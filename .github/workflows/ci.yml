name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.12'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-mock pytest-cov
    
    - name: Set up test environment
      run: |
        echo "GOOGLE_API_KEY=test_key" >> $GITHUB_ENV
        echo "TAVILY_API_KEY=test_key" >> $GITHUB_ENV
        echo "OPENROUTER_API_KEY=test_key" >> $GITHUB_ENV
        echo "DATABASE_URL=sqlite+aiosqlite:///./test.db" >> $GITHUB_ENV
        echo "LANGCHAIN_TRACING_V2=false" >> $GITHUB_ENV
    
    - name: Run unit tests
      run: |
        python -m pytest tests/test_models.py -v --cov=app --cov-report=xml
    
    - name: Run integration tests
      run: |
        python -m pytest tests/test_api.py tests/test_nodes.py -v --cov=app --cov-append --cov-report=xml
    
    - name: Run workflow tests
      run: |
        python -m pytest tests/test_workflow.py -v --cov=app --cov-append --cov-report=xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit safety
        pip install -r requirements.txt
    
    - name: Check code formatting with Black
      run: black --check --diff app/ tests/
    
    - name: Check import sorting with isort
      run: isort --check-only --diff app/ tests/
    
    - name: Lint with flake8
      run: flake8 app/ tests/ --max-line-length=100 --extend-ignore=E203,W503
    
    - name: Type checking with mypy
      run: mypy app/ --ignore-missing-imports
    
    - name: Security check with bandit
      run: bandit -r app/ -f json -o bandit-report.json || true
    
    - name: Dependency vulnerability check
      run: safety check --json --output safety-report.json || true

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: research-brief-generator:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm research-brief-generator:${{ github.sha }} python -c "import app; print('âœ… Import successful')"

  deploy:
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Render
      run: |
        echo "ðŸš€ Deployment to Render would be triggered here"
        echo "Repository: ${{ github.repository }}"
        echo "Commit SHA: ${{ github.sha }}"
        # In a real deployment, you would use Render's deploy hooks or API

  security:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
